<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>spring on Happy JiaHui</title>
    <link>https://happyjiahui.github.io/tags/spring/</link>
    <description>Recent content in spring on Happy JiaHui</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 04 Dec 2019 10:31:25 +0800</lastBuildDate>
    
	<atom:link href="https://happyjiahui.github.io/tags/spring/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>设置spring日志编码为UTF8</title>
      <link>https://happyjiahui.github.io/post/%E8%AE%BE%E7%BD%AEspring%E6%97%A5%E5%BF%97%E7%BC%96%E7%A0%81%E4%B8%BAutf8/</link>
      <pubDate>Wed, 04 Dec 2019 10:31:25 +0800</pubDate>
      
      <guid>https://happyjiahui.github.io/post/%E8%AE%BE%E7%BD%AEspring%E6%97%A5%E5%BF%97%E7%BC%96%E7%A0%81%E4%B8%BAutf8/</guid>
      <description>在resources中新增logback-spring.xml
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;configuration scan=&amp;#34;true&amp;#34;&amp;gt; &amp;lt;!--use Spring default values --&amp;gt; &amp;lt;include resource=&amp;#34;org/springframework/boot/logging/logback/defaults.xml&amp;#34;/&amp;gt; &amp;lt;appender name=&amp;#34;CONSOLE&amp;#34; class=&amp;#34;ch.qos.logback.core.ConsoleAppender&amp;#34;&amp;gt; &amp;lt;encoder&amp;gt; &amp;lt;pattern&amp;gt;${CONSOLE_LOG_PATTERN}&amp;lt;/pattern&amp;gt; &amp;lt;charset&amp;gt;utf8&amp;lt;/charset&amp;gt; &amp;lt;/encoder&amp;gt; &amp;lt;/appender&amp;gt; … &amp;lt;/configuration&amp;gt; </description>
    </item>
    
    <item>
      <title>Bean自动加载</title>
      <link>https://happyjiahui.github.io/post/bean%E8%87%AA%E5%8A%A8%E5%8A%A0%E8%BD%BD/</link>
      <pubDate>Mon, 02 Dec 2019 17:25:35 +0800</pubDate>
      
      <guid>https://happyjiahui.github.io/post/bean%E8%87%AA%E5%8A%A8%E5%8A%A0%E8%BD%BD/</guid>
      <description>通常来讲，要想实现上面的场景，建议是借助@Configuration注解的配置类来管理你自己的bean，这样对于其他使用方而言，只需要加载到你的配置类，就可以注册你的所有bean了。
  包路径扫描使用姿势
首先是在你的工程中定义一个配置类，如下
@Configuration @ComponentScan(&amp;#34;com.git.hui.boot.autoconfig&amp;#34;) public class SelfAutoConfig { } 这个配置类功能比较简单，指明扫描的包路径，然后这个配置类如何给使用方使用呢？ 将配置放在指定的文件中即可，使用者会自动加载，从而避免的代码的侵入。
在资源目录下新建目录 META-INF，在 META-INF 目录下新建文件 spring.factories，在文件中添加
org.springframework.boot.autoconfigure.EnableAutoConfiguration=com.git.hui.boot.autoconfig.SelfAutoConfig 说明，如果需要换行时，可以如下
org.springframework.boot.autoconfigure.EnableAutoConfiguration=\ com.git.hui.boot.autoconfig.SelfAutoConfig,` com.git.hui.boot.autoconfig.SelfAutoConfig2,` 然后使用方就可以愉快的使用你的bean了
  定义Bean使用方式 直接在Config配置中，定义Bean，可以说是更加常见的方式，特别是当你的bean不是那么多的时候，推荐使用这种方式，便于集中管理
@Slf4j public class AutoConfBean { private String name; public AutoConfBean(String name) { this.name = name; log.info(&amp;#34;AutoConfBean load time: {}&amp;#34;, System.currentTimeMillis()); } public String getName() { return name; } } 对应的配置类
@Configuration @ComponentScan(&amp;#34;com.git.hui.boot.autoconfig&amp;#34;) public class SelfAutoConfig { @Bean public AutoConfBean autoConfBean() { return new AutoConfBean(&amp;#34;auto load + &amp;#34; + System.</description>
    </item>
    
  </channel>
</rss>